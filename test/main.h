/* main.h */
#ifndef __DW_LINK
#define __DW_LINK

void setup();
void loop();
void monitorSystemLoadState();
void initSession();
void reportFatalError(byte, bool);
void setSysState(statetype);
void gdbHandleCmd();
void gdbParsePacket(const byte *);
void gdbParseMonitorPacket(const byte *);
void gdbTimeoutCounter();
void gdbSetSteppingMode(bool);
void gdbVersion();
void gdbReportRSPbps();
void gdbGetSpeed();
void gdbSetSpeed(const byte []);
byte findArg(const byte []);
void gdbSetMaxBPs(byte);
void gdbReportFlashCount();
void gdbReportRamUsage();
bool gdbConnect(bool);
bool powerCycle(bool);
//void power(bool);
void gdbStop();
bool gdbReset();
void gdbSetFuses(Fuses);
void getInstruction(unsigned int &, unsigned int &);
bool twoWordInstr(unsigned int);
void simTwoWordInstr(unsigned int, unsigned int);
byte gdbStep();
byte gdbContinue();
void gdbUpdateBreakpoints(bool);
void insertionSort(unsigned int *, int);
int gdbFindBreakpoint(unsigned int);
void gdbHandleBreakpointCommand(const byte *);
bool gdbInsertBreakpoint(unsigned int);
void gdbRemoveBreakpoint(unsigned int);
void gdbCleanupBreakpointTable();
void gdbReadRegisters();
void gdbWriteRegisters(const byte *);
void gdbReadMemory(const byte *);
void gdbHideBREAKs(unsigned int, byte *, int);
void gdbWriteMemory(const byte *, bool);
int gdbBin2Mem(const byte *, byte *, int);
bool targetOffline();
void flushInput();
void gdbSendByte(byte);
byte gdbReadByte();
void gdbSendReply(const char *);
void gdbSendSignal(byte);
void gdbSendBuff(const byte *, int);
void gdbSendPSTR(const char []);
void gdbState2Buf(byte);
void gdbSendState(byte);
void gdbReplyMessagePSTR(const char *, long);
void gdbReplyMessage(const char *);
void gdbDebugMessagePSTR(const char *, long);
void gdbMessage(const char *, long, bool, bool);
bool targetDWConnect();
int targetISPConnect();
bool targetStop();
int targetSetFuses(Fuses);
void targetReadFlashPage(unsigned int);
unsigned int targetReadFlashWord(unsigned int);
void targetReadFlash(unsigned int, byte *, unsigned int);
void targetReadSram(unsigned int, byte *, unsigned int);
void targetReadEeprom(unsigned int, byte *, unsigned int);
void targetWriteFlashPage(unsigned int);
void targetWriteFlash(unsigned int, byte *, unsigned int);
void targetFlushFlashProg();
void targetWriteSram(unsigned int, byte *, unsigned int);
void targetWriteEeprom(unsigned int, byte *, unsigned int);
void targetInitRegisters();
void targetSaveRegisters();
void targetRestoreRegisters();
void targetBreak();
void targetContinue();
void targetStep();
bool targetReset();
bool targetIllegalOpcode(unsigned int);
bool doBreak();
bool expectUCalibrate(void);
bool expectBreakAndU();
void sendCommand(const uint8_t *, uint8_t);
unsigned int getResponse(unsigned int);
unsigned int getResponse(byte *, unsigned int);
unsigned int getWordResponse(byte);
void DWsetSpeed(byte);
byte outHigh(byte, byte);
byte outLow(byte, byte);
byte inHigh(byte, byte);
byte inLow(byte, byte);
void DWwriteRegisters(byte *);
void DWwriteRegister(byte, byte);
void DWreadRegisters(byte *);
byte DWreadRegister(byte);
void DWwriteSramByte(unsigned int, byte);
void DWwriteIOreg(byte, byte);
byte DWreadSramByte(unsigned int);
byte DWreadIOreg(byte);
void DWreadSramBytes(unsigned int, byte *, byte);
byte DWreadEepromByte(unsigned int);
void DWwriteEepromByte(unsigned int, byte);
void DWreadFlash(unsigned int, byte *, unsigned int);
void DWeraseFlashPage(unsigned int);
void DWprogramFlashPage(unsigned int);
void DWloadFlashPageBuffer(unsigned int, byte *);
void DWreenableRWW();
byte DWreadSPMCSR();
unsigned int DWgetWPc(bool);
unsigned int DWgetChipId();
void DWsetWPc(unsigned int);
void DWsetWBp(unsigned int);
void DWexecOffline(unsigned int);
byte DWflushInput(void);
void enableSpiPins();
void disableSpiPins();
byte ispTransfer(byte);
byte ispSend(byte, byte, byte, byte, bool);
bool enterProgramMode();
void leaveProgramMode();
unsigned int ispGetChipId();
bool ispProgramFuse(bool, byte, byte);
bool ispEraseFlash();
bool ispLocked();
bool setMcuAttr(unsigned int);
char nib2hex(byte);
byte hex2nib(char);
byte parseHex(const byte *, unsigned long *);
void convNum(byte *, long);
void gdbHelp(void);
// dwSerial
void sendBreak();
size_t sendCmd(const uint8_t  *buf, uint8_t len);
void enable(bool);
bool overflow();

#endif